---
layout: post
title:  "A New Take: My Entrance to Agile Process"
date:   2015-12-27 11:32:40
categories: opinion
---
Back to open-source-driven \*nix platform after a half decade of _enterprise-$$$-only-oriented_ Win\*\*\*\* platform, everything feels different. From a _politically-driven-slow_ waterfall SDLC, to a _fast-user-oriented_ agile process, I immediately feel that my skills are well behind. Even (time wise) I had quite some experience here and there.

Each one of them has specific needs, and goal that has to be done, I am not saying here that one method is absolutely better than the other one. It's just the goal and the approach is different.

**In my olden days: Waterfall and The Boss is Always Right**

_Developers are just robots_. They do what they are told to be done. They are given a timeline without concerning their abilities and any probability of any unpredictable things that may happen. Again, one can argue to this. But again, because of the waterfall system applied, the developer can always be blamed for the delay, because the majority of bottleneck will occur in the development process.

_Why?_

When design is done, and given to the developer, it is considered done at their part. Developers can push back the design, but only before the development task is started. And design approval usually given by the _higher-ups_ who rarely consider (or even care about) the nitpicks of development process. That's why it is _politically-driven_, developers whose lack of political power usually have no other choice, or just pray...

<img src="https://s-media-cache-ak0.pinimg.com/236x/48/a5/1b/48a51b297a3c672ef7dc4318cb72a12b.jpg" />

With this method, the owner has the complete control over what they want, and developers has limited choices.

_Pre sales and promises comes first, reality of development comes later_. With lack of iteration and push back from development team, the sales team have no idea of the feasibility of the system. And the sales team are driven by their project sales number. Regardless of the outcome of the project. This encourages the sales team to make a lot of sales, and could care less about the development factor.

Because of the lack of development knowledge of most of the sales person, time estimation promised to the client, or even the system proposed, the entire project can diverge from the original quotation. This gap in the process can severely impact the actual resource and timeline of the project.

_Sc**w third party libraries, we'll create our very own library_. Even it will take considerable amount of resource (either research time or man power). This way again, the developer will have complete control and responsibility over the library. But mainly this is done for minimizing initial cost. But in my opinion the total cost for creating and maintaining a redundant library is greater. Again, this is arguable, not all company has the same policy, and my old employer seems to have this one on.

On the positive side though, I learned, at least, one lifetime skill as a programmer there. That is, I'd like to call it _'code sense'_. It's actually not that special though. Any programmer with decent experience will almost certainly have it. For this matter, I'd like to discuss this in another post, for that topic can be another long post.

**A New Entrance to the Agile Process**

<img src="http://www.netsolutionsindia.com/img/agile-methodology.jpg" />

Now, this is an entirely different method of working and collaboration than mentioned before. Quoting [Agile Manifesto](http://agilemanifesto.org/) :

>**Individuals and interactions** over processes and tools,
>**Working software** over comprehensive documentation,
>**Customer collaboration** over contract negotiation,
>**Responding to change** over following a plan
